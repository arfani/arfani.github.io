{"version":3,"sources":["serviceWorker.js","reducers/rootRed.js","components/Loading.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootRed","action","type","lang","dataLang","Loading","className","App","React","lazy","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","fetch","r","json","store","createStore","reducer","data","applyMiddleware","thunk","RenderDOM","render","fallback","document","getElementById","err","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kNAYMA,G,kBAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,0BCtElDC,EA1BC,SAACR,EAAOS,GACtB,GAAoB,aAAhBA,EAAOC,KACT,OAAQD,EAAOE,MACb,IAAK,UAIL,IAAK,OAIL,IAAK,QAIL,IAAK,QACHX,EAAK,eAAQA,IACPW,KAAOF,EAAOG,SAM1B,OAAOZ,G,QCZMa,EATC,kBACZ,kBAAC,WAAD,KACI,yBAAKC,UAAU,uBACX,4BAAI,uBAAGA,UAAU,uBACjB,iDACA,+ECKNC,EAAMC,IAAMC,MAAK,kBAAM,uDACvBC,EAAmBlC,OAAOmC,sCAAwCC,IACtEC,MAAM,yCAEL3B,MAAK,SAAA4B,GAAC,OAAIA,EAAEC,UACZ7B,MAAK,SAAA4B,GACJ,IAAME,EAAQC,YACZC,EACAJ,EAAEK,KACFT,EAAiBU,YAAgBC,OAEnCC,IAAUC,OACR,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,WAAD,CAAUQ,SAAU,kBAAC,EAAD,OAClB,kBAACjB,EAAD,QAGJkB,SAASC,eAAe,YAEzB5B,OAAM,SAAA6B,GACPjC,QAAQC,IAAIgC,GACZL,IAAUC,OACR,wBAAIjB,UAAU,0CAAd,oDACAmB,SAASC,eAAe,YHbvB,SAAkB5C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6C,IAAIC,GAAwBrD,OAAOC,SAASqD,MACpDC,SAAWvD,OAAOC,SAASsD,OAIvC,OAGFvD,OAAOwD,iBAAiB,QAAQ,WAC9B,IAAMnD,EAAK,UAAMgD,GAAN,sBAEPvD,IAgEV,SAAiCO,EAAOC,GAEtC+B,MAAMhC,GACHK,MAAK,SAAA+C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CvD,UAAUC,cAAcuD,MAAMrD,MAAK,SAAAC,GACjCA,EAAaqD,aAAatD,MAAK,WAC7BV,OAAOC,SAASgE,eAKpB7D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFA+C,CAAwB7D,EAAOC,GAI/BC,UAAUC,cAAcuD,MAAMrD,MAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,OGR/BE,K","file":"static/js/main.ac43fc21.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const rootRed = (state, action) => {\n  if (action.type === \"convLang\") {\n    switch (action.lang) {\n      case \"english\":\n        state = { ...state };\n        state.lang = action.dataLang;\n        break;\n      case \"indo\":\n        state = { ...state };\n        state.lang = action.dataLang;\n        break;\n      case \"sasak\":\n        state = { ...state };\n        state.lang = action.dataLang;\n        break;\n      case \"arab\":\n        state = { ...state };\n        state.lang = action.dataLang;\n        break;\n      default:\n        break;\n    }\n  }\n  return state;\n};\n\nexport default rootRed;\n","import React, { Fragment } from 'react';\n\nconst Loading = () =>\n    <Fragment>\n        <div className=\"text-center p-5 m-5\">\n            <h1><i className=\"fa fa-cog fa-spin\"></i></h1>\n            <h3>Preparing data...</h3>\n            <p>Thanks guy, for pleasuring to wait so long...</p>\n        </div>\n    </Fragment>\n\nexport default Loading;","import React, { Suspense } from \"react\";\nimport RenderDOM from \"react-dom\";\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/global.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from \"./reducers/rootRed\";\nimport thunk from \"redux-thunk\";\nimport Loading from \"./components/Loading\";\n\nconst App = React.lazy(() => import(\"./components/App\"));\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  fetch(\"https://restapi-cv.herokuapp.com/main\") // hosting heroku\n// fetch(\"http://localhost:3333/main\") // local (remember, run backend !)\n  .then(r => r.json())\n  .then(r => {\n    const store = createStore(\n      reducer,\n      r.data,\n      composeEnhancers(applyMiddleware(thunk))\n    );\n    RenderDOM.render(\n      <Provider store={store}>\n        <Suspense fallback={<Loading />}>\n          <App />\n        </Suspense>\n      </Provider>,\n      document.getElementById(\"root\")\n    );\n  }).catch(err => {\n    console.log(err);\n    RenderDOM.render(\n      <h2 className=\"bg-light text-dark text-center p-5 m-5\">Connection failed... please, check console log !</h2>,\n      document.getElementById(\"root\")\n    );\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}